// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define(["exports","../../../core/Error","../../../core/maybe","../../../layers/support/fieldUtils"],function(f,w,r,t){function k(a,b){return new w(a,b)}function u(a,b){a=r.isSome(a)?a:"";r.isSome(b)&&b&&(a=a?"("+a+") AND ("+b+")":b);return a}function x(a){const b=a.layer;return a.fields.filter(c=>!b.getField(c))}function y(a){const b=a.layer;return a.fields.filter(c=>{c=b.getFieldUsageInfo(c);return!c||!c.supportsStatistics})}f.calculateStatistics=function(a){const {values:b,useSampleStdDev:c,supportsNullCount:d}=
a;var e=Number.POSITIVE_INFINITY;let m=Number.NEGATIVE_INFINITY,n=null,p=null;var l=null;let q=null,h=0;const v=null==a.minValue?-Infinity:a.minValue;a=null==a.maxValue?Infinity:a.maxValue;for(const g of b)Number.isFinite(g)?g>=v&&g<=a&&(n+=g,e=Math.min(e,g),m=Math.max(m,g),h++):"string"===typeof g&&h++;if(h&&null!=n){p=n/h;l=0;for(const g of b)Number.isFinite(g)&&g>=v&&g<=a&&(l+=(g-p)**2);q=c?1<h?l/(h-1):0:0<h?l/h:0;l=Math.sqrt(q)}else m=e=null;e={avg:p,count:h,max:m,min:e,stddev:l,sum:n,variance:q};
d&&(e.nullcount=b.length-h);return e};f.calculateStringStatistics=function(a){const {values:b,supportsNullCount:c}=a;a=b.filter(e=>null!=e).length;const d={count:a};c&&(d.nullcount=b.length-a);return d};f.createError=k;f.getNormalizedValue=function(a,b,c,d){let e=null;switch(b){case "log":0!==a&&(e=Math.log(a)*Math.LOG10E);break;case "percent-of-total":Number.isFinite(d)&&0!==d&&(e=a/d*100);break;case "field":Number.isFinite(c)&&0!==c&&(e=a/c);break;case "natural-log":0<a&&(e=Math.log(a));break;case "square-root":0<
a&&(e=a**.5)}return e};f.getRangeExpr=function(a,b,c){b=null!=b?a+" \x3e\x3d "+b:"";a=null!=c?a+" \x3c\x3d "+c:"";c="";return(c=b&&a?u(b,a):b||a)?"("+c+")":""};f.getSQLFilterForNormalization=function(a){const b=a.field,c=a.normalizationType;a=a.normalizationField;let d;if("log"===c)d="(NOT "+b+" \x3d 0)";else if("field"===c)d="(NOT "+a+" \x3d 0)";else if("natural-log"===c||"square-root"===c)d=`(${b} > 0)`;return d};f.isNullCountSupported=function(a){const b=null!=a.minValue||null!=a.maxValue,c=!!a.sqlExpression&&
a.supportsSQLExpression;return!(null!=a.normalizationField||null!=a.normalizationType)&&!b&&!c};f.mergeWhereClauses=u;f.processStatsResult=function(a,b){if(!b)return a;["avg","stddev","variance"].forEach(c=>{null!=a[c]&&(a[c]=Math.ceil(a[c]))});return a};f.verifyBasicFieldValidity=function(a,b,c){const d=x({layer:a,fields:b});if(d.length)return k(c,"Unknown fields: "+d.join(", ")+". You can only use fields defined in the layer schema");a=y({layer:a,fields:b});if(a.length)return k(c,"Unsupported fields: "+
a.join(", ")+". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true")};f.verifyFieldType=function(a,b,c,d){let e=null;if(!b)e=k(c,"'field' is not defined in the layer schema");else if(b.name===a.objectIdField||-1===d.indexOf(b.type))e=k(c,"'field' should be one of these types: "+d.join(","));return e};f.verifyNumericField=function(a,b,c){let d;b?b.name!==a.objectIdField&&t.isNumericField(b)||(d=k(c,"'field' should be one of these numeric types: "+
t.numericTypes.join(","))):d=k(c,"'field' is not defined in the layer schema");return d};Object.defineProperty(f,"__esModule",{value:!0})});