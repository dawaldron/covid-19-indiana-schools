// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("../../../../chunks/vec3 ../../../../chunks/vec3f32 ../../../../chunks/vec3f64 ../../../../geometry/support/plane ../../../../geometry/support/ray ./BufferVectorMath ./Geometry ./geometryDataUtils ./Util".split(" "),function(m,r,aa,R,ba,ca,F,da,P){const M=ca.Vec3Compact;var S;(function(y){const C=[[-.5,-.5,.5],[.5,-.5,.5],[.5,.5,.5],[-.5,.5,.5],[-.5,-.5,-.5],[.5,-.5,-.5],[.5,.5,-.5],[-.5,.5,-.5]],G=[0,0,1,-1,0,0,1,0,0,0,-1,0,0,1,0,0,0,-1],I=[0,0,1,0,1,1,0,1],b=new Uint16Array([0,1,2,2,3,0,
4,0,3,3,7,4,1,5,6,6,2,1,1,0,4,4,5,1,3,2,6,6,7,3,5,4,7,7,6,5]),c=new Uint16Array(36);for(var a=0;6>a;a++)for(let e=0;6>e;e++)c[6*a+e]=a;const d=new Uint16Array(36);for(a=0;6>a;a++)d[6*a]=0,d[6*a+1]=1,d[6*a+2]=2,d[6*a+3]=2,d[6*a+4]=3,d[6*a+5]=0;y.createGeometry=function(e){Array.isArray(e)||(e=[e,e,e]);const g=Array(24);for(let f=0;8>f;f++)g[3*f]=C[f][0]*e[0],g[3*f+1]=C[f][1]*e[1],g[3*f+2]=C[f][2]*e[2];return new F.Geometry([["position",{size:3,data:g,exclusive:!0}],["normal",{size:3,data:G}],["uv0",
{size:2,data:I}]],[["position",b],["normal",c],["uv0",d]])}})(S||(S={}));var T;(function(y){const C=[[-.5,0,-.5],[.5,0,-.5],[.5,0,.5],[-.5,0,.5],[0,-.5,0],[0,.5,0]],G=[0,1,-1,1,1,0,0,1,1,-1,1,0,0,-1,-1,1,-1,0,0,-1,1,-1,-1,0],I=new Uint16Array([5,1,0,5,2,1,5,3,2,5,0,3,4,0,1,4,1,2,4,2,3,4,3,0]),b=new Uint16Array([0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7]);y.createGeometry=function(c){Array.isArray(c)||(c=[c,c,c]);const a=Array(18);for(let d=0;6>d;d++)a[3*d]=C[d][0]*c[0],a[3*d+1]=C[d][1]*c[1],
a[3*d+2]=C[d][2]*c[2];return new F.Geometry([["position",{size:3,data:a,exclusive:!0}],["normal",{size:3,data:G}]],[["position",I],["normal",b]])}})(T||(T={}));var U;(function(y){const C=r.fromValues(-.5,0,-.5),G=r.fromValues(.5,0,-.5),I=r.fromValues(0,0,.5),b=r.fromValues(0,.5,0),c=r.create(),a=r.create(),d=r.create(),e=r.create(),g=r.create();m.subtract(c,C,b);m.subtract(a,C,G);m.cross(d,c,a);m.normalize(d,d);m.subtract(c,G,b);m.subtract(a,G,I);m.cross(e,c,a);m.normalize(e,e);m.subtract(c,I,b);
m.subtract(a,I,C);m.cross(g,c,a);m.normalize(g,g);const f=[C,G,I,b],h=[0,-1,0,d[0],d[1],d[2],e[0],e[1],e[2],g[0],g[1],g[2]],l=[0,1,2,3,1,0,3,2,1,3,0,2],n=[0,0,0,1,1,1,2,2,2,3,3,3];y.createGeometry=function(p){Array.isArray(p)||(p=[p,p,p]);const q=Array(12);for(let k=0;4>k;k++)q[3*k]=f[k][0]*p[0],q[3*k+1]=f[k][1]*p[1],q[3*k+2]=f[k][2]*p[2];return new F.Geometry([["position",{size:3,data:q,exclusive:!0}],["normal",{size:3,data:h}]],[["position",new Uint16Array(l)],["normal",new Uint16Array(n)]])}})(U||
(U={}));var V;(function(y){function C(b,c,a,d,e){if(Math.abs(m.dot(c,b))>e)return!1;m.cross(a,b,c);m.normalize(a,a);m.cross(d,a,b);m.normalize(d,d);return!0}function G(b,c,a,d,e,g,f){return C(b,c,e,g,f)||C(b,a,e,g,f)||C(b,d,e,g,f)}y.createBoxGeometry=S.createGeometry;y.createDiamondGeometry=T.createGeometry;y.createTetrahedronGeometry=U.createGeometry;y.createSphereGeometry=function(b,c,a,d={uv:!0}){var e=-Math.PI,g=2*Math.PI,f=-Math.PI/2,h=Math.PI;c=Math.max(3,Math.floor(c));const l=Math.max(2,Math.floor(a));
var n=(c+1)*(l+1);a=new Float32Array(3*n);const p=new Float32Array(3*n);n=new Float32Array(2*n);const q=[];let k=0;for(var v=0;v<=l;v++){var A=[];const u=v/l,B=f+u*h,D=Math.cos(B);for(let t=0;t<=c;t++){const w=t/c;var z=e+w*g;const J=Math.cos(z)*D,E=Math.sin(B);z=-Math.sin(z)*D;a[3*k]=J*b;a[3*k+1]=E*b;a[3*k+2]=z*b;p[3*k]=J;p[3*k+1]=E;p[3*k+2]=z;n[2*k]=w;n[2*k+1]=u;A.push(k);++k}q.push(A)}b=new Uint32Array(2*c*(l-1)*3);k=0;for(e=0;e<l;e++)for(g=0;g<c;g++)f=q[e][g],h=q[e][g+1],v=q[e+1][g+1],A=q[e+1][g],
0===e?(b[k++]=f,b[k++]=v,b[k++]=A):e===l-1?(b[k++]=f,b[k++]=h,b[k++]=v):(b[k++]=f,b[k++]=h,b[k++]=v,b[k++]=v,b[k++]=A,b[k++]=f);c=[["position",b],["normal",b]];a=[["position",{size:3,data:a,exclusive:!0}],["normal",{size:3,data:p,exclusive:!0}]];d.uv&&(a.push(["uv0",{size:2,data:n,exclusive:!0}]),c.push(["uv0",b]));d.offset&&(c[0][0]="offset",a[0][0]="offset",c.push(["position",new Uint32Array(b.length)]),a.push(["position",{size:3,data:Float64Array.from(d.offset),exclusive:!0}]));return new F.Geometry(a,
c)};y.createPolySphereGeometry=function(b,c,a){function d(h,l){h>l&&([h,l]=[l,h]);const n=h.toString()+"."+l.toString();if(f[n])return f[n];let p=e.length;e.length+=3;M.add(e,3*h,e,3*l,e,p);M.scale(e,p,b/M.length(e,p));p/=3;return f[n]=p}let e;a?(e=[0,-1,0,1,0,0,0,0,1,-1,0,0,0,0,-1,0,1,0],a=new Uint32Array([0,1,2,0,2,3,0,3,4,0,4,1,1,5,2,2,5,3,3,5,4,4,5,1])):(a=b*(1+Math.sqrt(5))/2,e=[-b,a,0,b,a,0,-b,-a,0,b,-a,0,0,-b,a,0,b,a,0,-b,-a,0,b,-a,a,0,-b,a,0,b,-a,0,-b,-a,0,b],a=new Uint32Array([0,11,5,0,5,
1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1]));for(var g=0;g<e.length;g+=3)M.scale(e,g,b/M.length(e,g));let f={};for(g=0;g<c;g++){const h=a.length,l=new Uint32Array(4*h);for(let n=0;n<h;n+=3){const p=a[n],q=a[n+1],k=a[n+2],v=d(p,q),A=d(q,k),z=d(k,p),u=4*n;l[u]=p;l[u+1]=v;l[u+2]=z;l[u+3]=q;l[u+4]=A;l[u+5]=v;l[u+6]=k;l[u+7]=z;l[u+8]=A;l[u+9]=v;l[u+10]=A;l[u+11]=z}a=l;f={}}c=new Float32Array(e);for(g=0;g<c.length;g+=3)M.normalize(c,
g);a=[["position",a],["normal",a]];c=[["position",{size:3,data:new Float32Array(e),exclusive:!0}],["normal",{size:3,data:c,exclusive:!0}]];return new F.Geometry(c,a)};y.createPointGeometry=function(b,c,a,d,e,g,f){c=c?[c[0],c[1],c[2]]:[0,0,0];b=b?[b[0],b[1],b[2]]:[0,0,1];g=g||[0,0];a=[["position",{size:3,data:c,exclusive:!0}],["normal",{size:3,data:b,exclusive:!0}],["uv0",{size:g.length,data:g}],["color",{size:4,data:a?[255*a[0],255*a[1],255*a[2],3<a.length?255*a[3]:255]:[255,255,255,255],exclusive:!0}],
["size",{size:2,data:null!=d&&2===d.length?d:[1,1]}]];null!=e&&(e=new Float32Array([e[0],e[1],e[2],e[3]]),a.push(["auxpos1",{size:4,data:e}]));null!=f&&(f=new Float32Array([f[0],f[1],f[2],f[3]]),a.push(["auxpos2",{size:4,data:f}]));return new F.Geometry(a,null,1)};y.updatePointGeometry=function(b,c,a,d,e,g,f,h){if(null!=b){const {data:l}=h.getMutableAttribute("normal");l[0]=b[0];l[1]=b[1];l[2]=b[2]}null!=c&&({data:b}=h.getMutableAttribute("position"),b[0]=c[0],b[1]=c[1],b[2]=c[2]);null!=a&&({data:c}=
h.getMutableAttribute("color"),c[0]=a[0],c[1]=a[1],c[2]=a[2],c[3]=a[3]);null!=d&&({data:a}=h.getMutableAttribute("size"),a[0]=d[0],a[1]=d[1]);null!=e&&({data:d}=h.getMutableAttribute("auxpos1"),d[0]=e[0],d[1]=e[1],d[2]=e[2],d[3]=e[3]);null!=g&&({data:e}=h.getMutableAttribute("uv0"),e[0]=g[0],e[1]=g[1]);null!=f&&({data:g}=h.getMutableAttribute("auxpos2"),g[0]=f[0],g[1]=f[1],g[2]=f[2],g[3]=f[3])};y.createPointArrayGeometry=function(b,c){const a=new Float32Array(3*b.length),d=new Float32Array(c?3*b.length:
3),e=new Uint32Array(b.length),g=new Uint32Array(b.length);for(let f=0;f<b.length;f++)a[3*f]=b[f][0],a[3*f+1]=b[f][1],a[3*f+2]=b[f][2],c&&(d[3*f]=c[f][0],d[3*f+1]=c[f][1],d[3*f+2]=c[f][2]),e[f]=f,g[f]=0;c||(d[0]=0,d[1]=1,d[2]=0);return new F.Geometry([["position",{size:3,data:a,exclusive:!0}],["normal",{size:3,data:d,exclusive:!0}],["uv0",{size:2,data:[0,0],exclusive:!0}]],[["position",e],["normal",c?e:g],["uv0",g]],1)};y.createTriangleGeometry=function(){const b=new Uint16Array([0,1,2]),c=new Uint16Array([0,
0,0]),a=new Uint16Array([0,0,0]);return new F.Geometry([["position",{size:3,data:[0,0,0,0,0,100,100,0,0],exclusive:!0}],["normal",{size:3,data:[0,1,0],exclusive:!0}],["uv0",{size:2,data:[0,0],exclusive:!0}]],[["position",b],["normal",c],["uv0",a]])};const I=[[-1,-1,0],[1,-1,0],[1,1,0],[-1,1,0]];y.createSquareGeometry=function(b=I){const c=Array(12);for(var a=0;4>a;a++)for(let d=0;3>d;d++)c[3*a+d]=b[a][d];b=new Uint32Array([0,1,2,2,3,0]);a=new Uint32Array([0,0,0,0,0,0]);return new F.Geometry([["position",
{size:3,data:c,exclusive:!0}],["normal",{size:3,data:[0,0,1],exclusive:!0}],["uv0",{size:2,data:[0,0,1,0,1,1,0,1],exclusive:!0}],["color",{size:4,data:[255,255,255,255],exclusive:!0}]],[["position",b],["normal",a],["uv0",b],["color",a]])};y.createConeGeometry=function(b,c,a,d,e=!0,g=!0){var f=0,h=r.fromValues(0,f,0),l=r.fromValues(0,f+b,0),n=r.fromValues(0,-1,0),p=r.fromValues(0,1,0);d&&(f=b,l=r.fromValues(0,0,0),h=r.fromValues(0,f,0),n=r.fromValues(0,1,0),p=r.fromValues(0,-1,0));h=[l,h];n=[n,p];
p=a+2;l=Math.sqrt(b*b+c*c);if(d)for(d=a-1;0<=d;d--){var q=2*Math.PI/a*d,k=r.fromValues(Math.cos(q)*c,f,Math.sin(q)*c);h.push(k);q=r.fromValues(b*Math.cos(q)/l,-c/l,b*Math.sin(q)/l);n.push(q)}else for(d=0;d<a;d++)q=2*Math.PI/a*d,k=r.fromValues(Math.cos(q)*c,f,Math.sin(q)*c),h.push(k),q=r.fromValues(b*Math.cos(q)/l,c/l,b*Math.sin(q)/l),n.push(q);b=new Uint32Array(6*(a+2));a=new Uint32Array(6*(a+2));f=c=0;if(e){for(e=3;e<h.length;e++)b[c++]=1,b[c++]=e-1,b[c++]=e,a[f++]=0,a[f++]=0,a[f++]=0;b[c++]=h.length-
1;b[c++]=2;b[c++]=1;a[f++]=0;a[f++]=0;a[f++]=0}if(g){for(g=3;g<h.length;g++)b[c++]=g,b[c++]=g-1,b[c++]=0,a[f++]=g,a[f++]=g-1,a[f++]=1;b[c++]=0;b[c++]=2;b[c++]=h.length-1;a[f++]=1;a[f++]=2;a[f++]=n.length-1}g=new Float32Array(3*p);for(e=0;e<p;e++)g[3*e]=h[e][0],g[3*e+1]=h[e][1],g[3*e+2]=h[e][2];h=new Float32Array(3*p);for(e=0;e<p;e++)h[3*e]=n[e][0],h[3*e+1]=n[e][1],h[3*e+2]=n[e][2];return new F.Geometry([["position",{size:3,data:g,exclusive:!0}],["normal",{size:3,data:h,exclusive:!0}]],[["position",
b],["normal",a]])};y.createCylinderGeometry=function(b,c,a,d,e,g){d=d?r.clone(d):r.fromValues(1,0,0);e=e?r.clone(e):r.fromValues(0,0,0);g=null==g?!0:g;var f=r.create();m.normalize(f,d);const h=r.create();m.scale(h,f,Math.abs(b));const l=r.create();m.scale(l,h,-.5);m.add(l,l,e);const n=r.fromValues(0,1,0);.2>Math.abs(1-m.dot(f,n))&&m.set(n,0,0,1);const p=r.create();m.cross(p,f,n);m.normalize(p,p);m.cross(n,p,f);b=2*a+(g?2:0);e=a+(g?2:0);d=new Float32Array(3*b);const q=new Float32Array(3*e),k=new Float32Array(2*
b),v=new Uint32Array(3*a*(g?4:2)),A=new Uint32Array(3*a*(g?4:2));g&&(d[3*(b-2)]=l[0],d[3*(b-2)+1]=l[1],d[3*(b-2)+2]=l[2],k[2*(b-2)]=0,k[2*(b-2)+1]=0,d[3*(b-1)]=d[3*(b-2)]+h[0],d[3*(b-1)+1]=d[3*(b-2)+1]+h[1],d[3*(b-1)+2]=d[3*(b-2)+2]+h[2],k[2*(b-1)]=1,k[2*(b-1)+1]=1,q[3*(e-2)]=-f[0],q[3*(e-2)+1]=-f[1],q[3*(e-2)+2]=-f[2],q[3*(e-1)]=f[0],q[3*(e-1)+1]=f[1],q[3*(e-1)+2]=f[2]);f=function(t,w,J){v[t]=w;A[t]=J};let z=0;const u=r.create(),B=r.create();for(let t=0;t<a;t++){var D=2*Math.PI/a*t;m.scale(u,n,Math.sin(D));
m.scale(B,p,Math.cos(D));m.add(u,u,B);q[3*t]=u[0];q[3*t+1]=u[1];q[3*t+2]=u[2];m.scale(u,u,c);m.add(u,u,l);d[3*t]=u[0];d[3*t+1]=u[1];d[3*t+2]=u[2];k[2*t]=t/a;k[2*t+1]=0;d[3*(t+a)]=d[3*t]+h[0];d[3*(t+a)+1]=d[3*t+1]+h[1];d[3*(t+a)+2]=d[3*t+2]+h[2];k[2*(t+a)]=t/a;k[2*t+1]=1;D=(t+1)%a;f(z++,t,t);f(z++,t+a,t);f(z++,D,D);f(z++,D,D);f(z++,t+a,t);f(z++,D+a,D)}if(g){for(c=0;c<a;c++)g=(c+1)%a,f(z++,b-2,e-2),f(z++,c,e-2),f(z++,g,e-2);for(c=0;c<a;c++)g=(c+1)%a,f(z++,c+a,e-1),f(z++,b-1,e-1),f(z++,g+a,e-1)}return new F.Geometry([["position",
{size:3,data:d,exclusive:!0}],["normal",{size:3,data:q,exclusive:!0}],["uv0",{size:2,data:k,exclusive:!0}]],[["position",v],["normal",A],["uv0",v]])};y.createTubeGeometry=function(b,c,a,d,e){a=a||10;d=null!=d?d:!0;P.assert(1<b.length);const g=[],f=[];for(let h=0;h<a;h++){g.push([0,-h-1,-((h+1)%a)-1]);const l=h/a*2*Math.PI;f.push([Math.cos(l)*c,Math.sin(l)*c])}return y.createPathExtrusionGeometry(f,b,[[0,0,0]],g,d,e)};y.createPathExtrusionGeometry=function(b,c,a,d,e,g=r.fromValues(0,0,0)){var f=b.length;
const h=new Float32Array(c.length*f*3+(6*a.length||0)),l=new Float32Array(c.length*f*3+(a?6:0));var n=(c.length-1)*f*6+6*d.length;const p=new Uint32Array(n);n=new Uint32Array(n);let q=0;var k=0;let v=0,A=0;const z=r.create(),u=r.create(),B=r.create(),D=r.create(),t=r.create(),w=r.create(),J=r.create(),E=aa.create(),Q=r.create(),N=r.create(),X=r.create(),W=r.create(),ea=r.create(),Y=R.create();m.set(Q,0,1,0);m.subtract(u,c[1],c[0]);m.normalize(u,u);e?(m.add(E,c[0],g),m.normalize(B,E)):m.set(B,0,0,
1);G(u,B,Q,Q,t,B,.99619469809);m.copy(D,B);m.copy(W,t);for(var x=0;x<a.length;x++)m.scale(w,t,a[x][0]),m.scale(E,B,a[x][2]),m.add(w,w,E),m.add(w,w,c[0]),h[q++]=w[0],h[q++]=w[1],h[q++]=w[2];l[k++]=-u[0];l[k++]=-u[1];l[k++]=-u[2];for(x=0;x<d.length;x++)p[v++]=0<d[x][0]?d[x][0]:-d[x][0]-1+a.length,p[v++]=0<d[x][1]?d[x][1]:-d[x][1]-1+a.length,p[v++]=0<d[x][2]?d[x][2]:-d[x][2]-1+a.length,n[A++]=0,n[A++]=0,n[A++]=0;x=a.length;const fa=a.length-1;for(let H=0;H<c.length;H++){let Z=!1;0<H&&(m.copy(z,u),H<
c.length-1?(m.subtract(u,c[H+1],c[H]),m.normalize(u,u)):Z=!0,m.add(N,z,u),m.normalize(N,N),m.add(X,c[H-1],D),R.fromPositionAndNormal(c[H],N,Y),R.intersectRay(Y,ba.wrap(X,z),E)?(m.subtract(E,E,c[H]),m.normalize(B,E),m.cross(t,N,B),m.normalize(t,t)):G(N,D,W,Q,t,B,.99619469809),m.copy(D,B),m.copy(W,t));e&&(m.add(E,c[H],g),m.normalize(ea,E));for(let K=0;K<f;K++)if(m.scale(w,t,b[K][0]),m.scale(E,B,b[K][1]),m.add(w,w,E),m.normalize(J,w),l[k++]=J[0],l[k++]=J[1],l[k++]=J[2],m.add(w,w,c[H]),h[q++]=w[0],h[q++]=
w[1],h[q++]=w[2],!Z){var L=(K+1)%f;p[v++]=x+K;p[v++]=x+f+K;p[v++]=x+L;p[v++]=x+L;p[v++]=x+f+K;p[v++]=x+f+L;for(L=0;6>L;L++)n[A++]=p[v-6+L]-fa}x+=f}b=c[c.length-1];for(c=0;c<a.length;c++)m.scale(w,t,a[c][0]),m.scale(E,B,a[c][1]),m.add(w,w,E),m.add(w,w,b),h[q++]=w[0],h[q++]=w[1],h[q++]=w[2];a=k/3;l[k++]=u[0];l[k++]=u[1];l[k++]=u[2];f=x-f;for(k=0;k<d.length;k++)p[v++]=0<=d[k][0]?x+d[k][0]:-d[k][0]-1+f,p[v++]=0<=d[k][2]?x+d[k][2]:-d[k][2]-1+f,p[v++]=0<=d[k][1]?x+d[k][1]:-d[k][1]-1+f,n[A++]=a,n[A++]=a,
n[A++]=a;return new F.Geometry([["position",{size:3,data:h,exclusive:!0}],["normal",{size:3,data:l,exclusive:!0}]],[["position",p],["normal",n]])};y.createPolylineGeometry=function(b,c,a){P.assert(1<b.length,"createPolylineGeometry(): polyline needs at least 2 points");P.assert(3===b[0].length,"createPolylineGeometry(): malformed vertex");P.assert(null==c||c.length===b.length,"createPolylineGeometry: need same number of points and normals");P.assert(null==c||3===c[0].length,"createPolylineGeometry(): malformed normal");
var d=new Float64Array(3*b.length);const e=new Uint32Array(2*(b.length-1));var g=0,f=0;for(var h=0;h<b.length;h++){for(var l=0;3>l;l++)d[g++]=b[h][l];0<h&&(e[f++]=h-1,e[f++]=h)}g=[];f=[];g.push(["position",e]);f.push(["position",{size:3,data:d,exclusive:!0}]);if(c){d=new Float32Array(3*c.length);h=0;for(l=0;l<b.length;l++)for(let n=0;3>n;n++)d[h++]=c[l][n];g.push(["normal",e]);f.push(["normal",{size:3,data:d,exclusive:!0}])}a&&(f.push(["color",{size:4,data:a}]),g.push(["color",da.generateDefaultIndexArray(a.length/
4)]));return new F.Geometry(f,g,2)};y.createExtrudedTriangle=function(b,c,a,d,e=0){const g=Array(18);b=[[-c,e,d/2],[a,e,d/2],[0,b+e,d/2],[-c,e,-d/2],[a,e,-d/2],[0,b+e,-d/2]];c=new Uint16Array([0,1,2,3,0,2,2,5,3,1,4,5,5,2,1,1,0,3,3,4,1,4,3,5]);for(a=0;6>a;a++)g[3*a]=b[a][0],g[3*a+1]=b[a][1],g[3*a+2]=b[a][2];return new F.Geometry([["position",{size:3,data:g,exclusive:!0}]],[["position",c]])};y.transformInPlace=function(b,c){b=b.getMutableAttribute("position").data;for(let a=0;a<b.length;a+=3)m.set(O,
b[a],b[a+1],b[a+2]),m.transformMat4(O,O,c),b[a]=O[0],b[a+1]=O[1],b[a+2]=O[2]};y.cgToGIS=function(b,c=b){var a=b.vertexAttributes;b=a.get("position").data;if(a=a.get("normal").data){var d=c.getMutableAttribute("normal").data;for(var e=0;e<a.length;e+=3){const g=a[e+1];d[e+1]=-a[e+2];d[e+2]=g}}if(b)for(a=c.getMutableAttribute("position").data,d=0;d<b.length;d+=3)e=b[d+1],a[d+1]=-b[d+2],a[d+2]=e;return c};y.makeOrthoBasisDirUp=C;y.makeOrthoBasisDirUpFallback=G})(V||(V={}));const O=r.create();return V});