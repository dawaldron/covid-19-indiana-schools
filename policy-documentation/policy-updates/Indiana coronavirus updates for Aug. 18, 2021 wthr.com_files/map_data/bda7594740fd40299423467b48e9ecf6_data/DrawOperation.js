// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../../../chunks/tslib.es6 ../../../../../geometry ../../../../../core/Evented ../../../../../core/HandleOwner ../../../../../core/Handles ../../../../../core/lang ../../../../../core/maybe ../../../../../core/promiseUtils ../../../../../core/screenUtils ../../../../../core/accessorSupport/decorators/property ../../../../../core/accessorSupport/ensureType ../../../../../core/has ../../../../../core/Logger ../../../../../core/jsonMap ../../../../../core/accessorSupport/decorators/subclass ../../../../../layers/graphics/dehydratedFeatureComparison ../../SnappingDragPipelineStep ../../SnappingVisualizer3D ./DrawManipulator ../../../../draw/DrawingMode ../../../../interactive/coordinateHelper ../../../../interactive/dragEventPipeline ../../../../interactive/editGeometry/EditGeometryHelper ../../../../interactive/snapping/SnappingContext ../../../../support/Scheduler ../../../../interactive/editGeometry/EditGeometry ../../../../../geometry/Point".split(" "),
function(k,r,m,Q,C,D,E,F,d,G,H,n,R,S,T,U,I,J,K,u,L,v,M,t,N,w,x,y,O){k.DrawOperation=function(z){function p(a){a=z.call(this,a)||this;a._manipulator=null;a._stagedVertex=null;a.elevationInfo=null;a.snapToSceneEnabled=null;a._handles=new E;a._snappingPipeline=new K.SnappingPipeline;a._createOperationCompleted=!1;a._pointerDownStates=new Set;a._snappingTask=null;return a}r._inheritsLoose(p,z);var f=p.prototype;f.initialize=function(){var a,b;this.coordinateHelper=M.createCoordinateHelper(this.hasZ,this.hasM,
this.view.spatialReference,this.view.viewingMode);var e=null==(a=this.view)?void 0:null==(b=a.resourceController)?void 0:b.scheduler;this._frameTask=e?e.registerTask(x.TaskPriority.SNAPPING):x.ImmediateTask;this._editGeometry=new N.EditGeometryHelper(new y.EditGeometry(this.coordinateHelper),"segment"===this.geometryType?"polyline":this.geometryType);this._activeComponent=new y.Component(this._editGeometry.editGeometry);this._editGeometry.editGeometry.components.push(this._activeComponent);this._editGeometry.on(["vertex-add",
"vertex-update","vertex-remove"],c=>{const l=c.vertices.map(g=>({componentIndex:0,vertexIndex:g.index,coordinates:this.coordinateHelper.toArray(g.pos)})),h=l.map(g=>g.coordinates);switch(c.type){case "vertex-add":this.emit(c.type,{...c,added:h,vertices:l});break;case "vertex-update":this.emit(c.type,{...c,updated:h,vertices:l});break;case "vertex-remove":this.emit(c.type,{...c,removed:h,vertices:l})}});this._manipulator=new L.DrawManipulator({grabbableForEvent:c=>"click"!==this.drawingMode?!0:"touch"===
c.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size});this.manipulators.add(this._manipulator);this._manipulator.grabbable="point"!==this.geometryType;a=this.createManipulatorDragPipeline(this._manipulator);b=this._manipulator.events.on("immediate-double-click",c=>{this._manipulator.dragging||"point"===this.geometryType||(this.complete(),c.stopPropagation())});e=this._manipulator.events.on("immediate-click",c=>{if(!this._manipulator.dragging){var l=this._activeComponent,h=this._closeOnClickVertexIndex(c.screenPoint);
if(d.isSome(h))this.discardStagedVertex(),this.complete();else if(h=this._screenToMap(c.screenPoint),d.isSome(h))switch(this.drawingMode){case "freehand":"point"===this.geometryType&&(this.hasStagedVertex?this.commitStagedVertex():this._editGeometry.appendVertex(this.coordinateHelper.fromPoint(h)),this.complete());break;case "click":case "hybrid":this._snappingTask=d.abortMaybe(this._snappingTask),this.hasStagedVertex?this.commitStagedVertex():this._editGeometry.appendVertex(this.coordinateHelper.fromPoint(h)),
("point"===this.geometryType||"segment"===this.geometryType&&2===l.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===l.vertices.length)&&this.complete()}c.stopPropagation()}});this._handles.add([a,e,b])};f.createManipulatorDragPipeline=function(a){switch(this.drawingMode){case "click":return this.createManipulatorDragPipelineClick(a);case "freehand":return this.createManipulatorDragPipelineFreehand(a);case "hybrid":return this.createManipulatorDragPipelineHybrid(a)}};
f.createManipulatorDragPipelineClick=function(a){return t.createManipulatorDragEventPipeline(a,(b,e,c,l)=>{const h="touch"===l&&this._snappingEnabled;!this.isCompleted&&h&&(e.next(this._screenToMapDragEventStep()).next(g=>{"start"===g.action&&(this.stagedVertex=g.mapStart,("segment"===this.geometryType||h&&0===this.numVertices)&&this.commitStagedVertex());return g}).next(this._snappingPipeline.createSnapDragEventPipelineStep({predicate:()=>h,cancel:c,snappingManager:this.snappingManager,snappingContext:new w.SnappingContext({geometry:this._editGeometry,
elevationInfo:this.elevationInfo,pointer:l,visualizer:new u.SnappingVisualizer3D}),updatingHandles:this.updatingHandles}),this._snappingPipeline.next).next(g=>{h&&(this.stagedVertex=g.mapEnd,"end"===g.action&&this.commitStagedVertex());return g}).next(g=>{"end"!==g.action||"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete();return g}),c.next(()=>{h&&d.isSome(this.snappingManager)&&this.snappingManager.doneSnapping()}))})};f.createManipulatorDragPipelineFreehand=function(a){return t.createManipulatorDragEventPipeline(a,
(b,e)=>{this.isCompleted||e.next(this._screenToMapDragEventStep()).next(c=>{"start"===c.action&&(this.stagedVertex=c.mapStart,"segment"===this.geometryType&&this.commitStagedVertex());return c}).next(c=>{switch(c.action){case "start":case "update":this.stagedVertex=c.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":this.complete()}return c})})};f.createManipulatorDragPipelineHybrid=function(a){return t.createManipulatorDragEventPipeline(a,
(b,e)=>{this.isCompleted||e.next(this._screenToMapDragEventStep()).next(c=>{"start"===c.action&&(this.stagedVertex=c.mapStart,this.commitStagedVertex());return c}).next(c=>{switch(c.action){case "start":case "update":this.stagedVertex=c.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return c})})};f.destroy=function(){this._handles.destroy();this._handles=null;
this._editGeometry.destroy();this._frameTask.remove()};f.onInputEvent=function(a){switch(a.type){case "pointer-down":this._pointerDownStates.add(a.pointerId);break;case "pointer-up":this._pointerDownStates.delete(a.pointerId)}switch(a.type){case "pointer-move":return this._onPointerMove(a);case "hold":return this._onHold(a)}};f.redo=function(){this._editGeometry.redo()};f.undo=function(){d.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();this._editGeometry.undo()};f.complete=function(a=
!1){d.abortMaybe(this._snappingTask);d.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();"polyline"===this.geometryType||"polygon"===this.geometryType?this.discardStagedVertex():this.commitStagedVertex();this._createOperationCompleted=!("polyline"===this.geometryType&&2>this.numVertices||"polygon"===this.geometryType&&3>this.numVertices);(this.isCompleted||a)&&this.emit("complete",{vertices:this.vertices.map((b,e)=>({componentIndex:0,vertexIndex:e,coordinates:b})),aborted:a,type:"complete"})};
f.cancel=function(){this.complete(!0)};f.commitStagedVertex=function(){this._snappingTask=d.abortMaybe(this._snappingTask);if(d.isSome(this._stagedVertex)){const a=this._stagedVertex;this._stagedVertex=null;this._editGeometry.appendVertex(this.coordinateHelper.fromPoint(a))}};f.discardStagedVertex=function(){this._stagedVertex=null};f._onPointerMove=function(a){var b=this;d.abortMaybe(this._snappingTask);if(!(this._manipulator.dragging||this._pointerDownStates.has(a.pointerId)||this._manipulator.grabbing)&&
this._manipulator.interactive){var e=H.createScreenPoint(a.x,a.y),c=this._closeOnClickVertexIndex(e);if(d.isSome(c))this.discardStagedVertex(),e={componentIndex:0,vertexIndex:c,coordinates:this.coordinateHelper.toArray(this._activeComponent.vertices[c].pos)},this.emit("cursor-update",{updated:null,vertices:[e],operation:"apply",type:"vertex-update"});else{const l=this._screenToMap(e);this._manipulator.cursor=d.isSome(l)?"crosshair":null;if(d.isSome(l))if(d.isSome(this.snappingManager)){const h=this.snappingManager,
g=new w.SnappingContext({geometry:this._editGeometry,elevationInfo:this.elevationInfo,pointer:a.pointerType,visualizer:new u.SnappingVisualizer3D});this.stagedVertex=h.update(l,g);this._snappingTask=G.createTask(function(){var P=r._asyncToGenerator(function*(q){const A=yield b._frameTask.schedule(()=>h.snap(l,g,q),q);A.valid&&(yield b._frameTask.schedule(()=>{b.stagedVertex=A.apply()},q))});return function(q){return P.apply(this,arguments)}}());this.updatingHandles.addPromise(this._snappingTask.promise)}else this.stagedVertex=
l}a.stopPropagation()}};f._onHold=function(a){d.abortMaybe(this._snappingTask);"click"===this.drawingMode&&"touch"===a.pointerType&&this._snappingEnabled&&(this.stagedVertex=a.mapPoint);a.stopPropagation()};f._screenToMapDragEventStep=function(){let a=null;return b=>{"start"===b.action&&(a=this._screenToMap(b.screenStart));if(d.isNone(a))return null;const e=this._screenToMap(b.screenEnd);return d.isSome(e)?{...b,mapStart:a,mapEnd:e}:null}};f._screenToMap=function(a){return this._getDrawSurface().screenToMap(a)};
f._mapToScreen=function(a){return this._getDrawSurface().mapToScreen(a)};f._getDrawSurface=function(){if(!this.coordinateHelper.hasZ)return this.elevationDrawSurface.defaultZ=null,this.elevationDrawSurface;let a=this.defaultZ,b=!1;d.isSome(this.elevationInfo)&&"absolute-height"===this.elevationInfo.mode&&(b=!0);d.isSome(this.snapToSceneEnabled)&&(b=this.snapToSceneEnabled);d.isSome(this.elevationInfo)&&"on-the-ground"===this.elevationInfo.mode&&(b=!1);const e=this._activeComponent.vertices.length;
("segment"===this.geometryType||"polygon"===this.geometryType)&&0<e&&(a=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),b=!1);if(b)return this.sceneDrawSurface;this.elevationDrawSurface.defaultZ=a;return this.elevationDrawSurface};f._vertexWithinPointerDistance=function(a,b){const e=this._mapToScreen(a);d.isSome(e)?(a=e.x-b.x,b=e.y-b.y,b=25>=a*a+b*b):b=!1;return b};f._closeOnClickVertexIndex=function(a){const b=this._activeComponent;if("polygon"===this.geometryType&&2<b.vertices.length){if(this._vertexWithinPointerDistance(this.coordinateHelper.toPoint(b.vertices[0].pos,
B),a))return 0;if(this._vertexWithinPointerDistance(this.coordinateHelper.toPoint(b.vertices[b.vertices.length-1].pos,B),a))return b.vertices.length-1}return null};r._createClass(p,[{key:"drawingMode",set:function(a){this._set("drawingMode",null!=a?a:v.defaultDrawingMode)}},{key:"updating",get:function(){return this.updatingHandles.updating}},{key:"isCompleted",get:function(){return this._createOperationCompleted}},{key:"_snappingEnabled",get:function(){return d.isSome(this.snappingManager)&&this.snappingManager.options.effectiveEnabled}},
{key:"canRedo",get:function(){return this._editGeometry.canRedo}},{key:"canUndo",get:function(){return this._editGeometry.canUndo}},{key:"interactive",get:function(){return this._manipulator.interactive},set:function(a){this._manipulator.interactive=a}},{key:"numVertices",get:function(){return d.isSome(this._stagedVertex)?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}},{key:"numCommittedVertices",get:function(){return this._activeComponent.vertices.length}},{key:"vertices",
get:function(){const a=this.committedVertices;d.isSome(this._stagedVertex)&&a.push(this.coordinateHelper.pointToArray(this._stagedVertex));return a}},{key:"committedVertices",get:function(){return this._activeComponent.vertices.map(a=>this.coordinateHelper.toArray(a.pos))}},{key:"spatialReference",get:function(){return this.view.spatialReference}},{key:"hasStagedVertex",get:function(){return d.isSome(this._stagedVertex)}},{key:"stagedVertex",get:function(){return this._stagedVertex},set:function(a){if(d.isNone(a))this.discardStagedVertex();
else{if(d.isNone(this._stagedVertex))this._stagedVertex=F.clone(a);else{if(J.pointEquals(this._stagedVertex,a))return;this._stagedVertex.x=a.x;this._stagedVertex.y=a.y;this._stagedVertex.z=a.z;this._stagedVertex.m=a.m;this._stagedVertex.hasZ=a.hasZ;this._stagedVertex.hasM=a.hasM;this._stagedVertex.spatialReference=a.spatialReference}this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(a)}],
operation:"apply",type:"vertex-update"})}}}]);return p}(C.EventedMixin(D.HandleOwner));m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"view",void 0);m.__decorate([n.property({value:v.defaultDrawingMode})],k.DrawOperation.prototype,"drawingMode",null);m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"geometryType",void 0);m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"elevationInfo",void 0);m.__decorate([n.property()],k.DrawOperation.prototype,
"snapToSceneEnabled",void 0);m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"manipulators",void 0);m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"hasZ",void 0);m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"hasM",void 0);m.__decorate([n.property()],k.DrawOperation.prototype,"defaultZ",void 0);m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"sceneDrawSurface",void 0);m.__decorate([n.property({constructOnly:!0})],
k.DrawOperation.prototype,"elevationDrawSurface",void 0);m.__decorate([n.property({constructOnly:!0})],k.DrawOperation.prototype,"snappingManager",void 0);m.__decorate([n.property({readOnly:!0})],k.DrawOperation.prototype,"updating",null);k.DrawOperation=m.__decorate([I.subclass("esri.views.3d.interactive.editingTools.draw3D.DrawOperation")],k.DrawOperation);const B=new O({x:0,y:0,z:0});Object.defineProperty(k,"__esModule",{value:!0})});