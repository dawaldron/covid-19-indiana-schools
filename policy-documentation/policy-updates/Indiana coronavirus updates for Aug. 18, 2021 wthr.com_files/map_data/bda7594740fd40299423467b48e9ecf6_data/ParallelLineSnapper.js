// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.20/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/_rollupPluginBabelHelpers ../../../core/maybe ../../../chunks/vec2 ../../../chunks/vec2f64 ./Settings ./SnappingAlgorithm ./snappingUtils ./candidates/ParallelLineSnappingCandidate ../../support/geometry2dUtils".split(" "),function(r,y,z,t,A,u,n,l,B,p){n=function(v){function q(){var c=v.apply(this,arguments)||this;c._tmpProjection=A.create();return c}y._inheritsLoose(q,v);var m=q.prototype;m.snapNewVertex=function(c,a){var b=a.geometry.editGeometry.components[0],d=
b.edges.length,e=b.vertices.length;const g=[];if(2>d)return g;const f=l.anyMapPointToScreenPoint(c,a.coordinateHelper,a.elevationInfo,this.view);e=b.vertices[e-1];const k=b.vertices[0];d=b=b.edges[d-1];do this.edgeExceedsShortLineThreshold(d,a)&&(this._checkEdgeForParalleLines(d,e.pos,c,f,a,g),this._checkEdgeForParalleLines(d,k.pos,c,f,a,g)),d=d.left.left;while(d&&d!==b);return g};m.snapExistingVertex=function(c,a){const b=[],d=z.unwrap(a.vertexHandle);var e=d.component;if(3>e.edges.length)return b;
const g=l.anyMapPointToScreenPoint(c,a.coordinateHelper,a.elevationInfo,this.view),f=d.left,k=d.right,w=e.vertices[0],x=e.vertices[e.vertices.length-1];let h=e=e.edges[0];do h!==f&&h!==k&&this.edgeExceedsShortLineThreshold(h,a)&&(f&&this._checkEdgeForParalleLines(h,f.left.pos,c,g,a,b),k&&this._checkEdgeForParalleLines(h,k.right.pos,c,g,a,b),d===w?this._checkEdgeForParalleLines(h,x.pos,c,g,a,b):d===x&&this._checkEdgeForParalleLines(h,w.pos,c,g,a,b)),h=h.right.right;while(h&&h!==e);return b};m._checkEdgeForParalleLines=
function(c,a,b,d,e,g){var f=c.left.pos;const k=c.right.pos;p.projectPointToLine(this._tmpProjection,a,f,k);t.squaredDistance(this._tmpProjection,a)<u.defaults.parallelLineThreshold||(p.projectPointToLine(this._tmpProjection,b,f,k,a),f=e.coordinateHelper,b=f.fromXYZ(this._tmpProjection,f.getZ(b,0)),l.squareDistance(d,l.anyMapPointToScreenPoint(b,f,e.elevationInfo,this.view))<this.squaredProximityTreshold(e.pointer)&&!this.parallelToPreviousCandidate(c,g)&&g.push(new B.ParallelLineSnappingCandidate({coordinateHelper:f,
referenceLine:c,lineStart:a,targetPoint:b})))};m.parallelToPreviousCandidate=function(c,a){const b=c.left.pos,d=c.right.pos;for(const e of a)if(p.projectPointToLine(this._tmpProjection,d,e.constraint.start,e.constraint.end,b),t.squaredDistance(this._tmpProjection,d)<u.defaults.parallelLineThreshold)return e.addReferenceLine(c),!0;return!1};return q}(n.SnappingAlgorithm);r.ParallelLineSnapper=n;Object.defineProperty(r,"__esModule",{value:!0})});